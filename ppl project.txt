<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NovaSphere - Ultimate Task Manager</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;500;700&family=Montserrat:wght@900&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: hsl(258, 89%, 66%);
            --secondary: hsl(152, 89%, 64%);
            --accent: hsl(358, 89%, 64%);
            --bg: hsl(240, 6%, 10%);
            --glass: hsla(240, 6%, 10%, 0.4);
            --text: hsl(0, 0%, 98%);
            --neon-shadow: 0 0 15px var(--primary);
            --category-work: hsl(258, 89%, 66%);
            --category-personal: hsl(152, 89%, 64%);
            --category-shopping: hsl(358, 89%, 64%);
        }

        [data-theme="light"] {
            --bg: hsl(0, 0%, 98%);
            --text: hsl(240, 6%, 10%);
            --glass: hsla(0, 0%, 100%, 0.4);
            --category-work: hsl(258, 89%, 46%);
            --category-personal: hsl(152, 89%, 44%);
            --category-shopping: hsl(358, 89%, 44%);
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        body {
            font-family: 'Space Grotesk', sans-serif;
            background: var(--bg);
            color: var(--text);
            min-height: 100vh;
            padding: 2rem;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            position: relative;
        }

        .hero {
            text-align: center;
            margin-bottom: 3rem;
        }

        .hero h1 {
            font-size: 4rem;
            font-weight: 900;
            font-family: 'Montserrat', sans-serif;
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: var(--neon-shadow);
            letter-spacing: 0.1em;
        }

        .controls {
            display: grid;
            grid-template-columns: 1fr auto;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .search-bar {
            background: var(--glass);
            backdrop-filter: blur(10px);
            border: 2px solid var(--primary);
            padding: 1rem;
            border-radius: 1rem;
            color: var(--text);
            font-size: 1.1rem;
        }

        .task-creator {
            background: var(--glass);
            backdrop-filter: blur(20px);
            border-radius: 2rem;
            padding: 2rem;
            margin-bottom: 3rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            border: 1px solid hsla(0, 0%, 100%, 0.1);
        }

        .input-grid {
            display: grid;
            grid-template-columns: 1fr auto auto auto auto;
            gap: 1rem;
            align-items: center;
        }

        .task-input {
            background: transparent;
            border: 2px solid hsla(0, 0%, 100%, 0.1);
            padding: 1.2rem;
            border-radius: 1rem;
            color: var(--text);
            font-size: 1.1rem;
            transition: all 0.3s ease;
        }

        .task-input:focus {
            border-color: var(--primary);
            box-shadow: var(--neon-shadow);
            outline: none;
        }

        .task-list {
            display: grid;
            gap: 1.5rem;
        }

        .task-card {
            background: var(--glass);
            backdrop-filter: blur(10px);
            padding: 1.5rem;
            border-radius: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1.5rem;
            position: relative;
            transform: translateX(0);
            opacity: 1;
            transition: all 0.4s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .task-card.completed {
            opacity: 0.7;
        }

        .task-card.completed h3 {
            text-decoration: line-through;
        }

        .priority-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 1rem;
        }

        .priority-high { background: var(--accent) }
        .priority-medium { background: var(--secondary) }
        .priority-low { background: var(--primary) }

        .complete-btn {
            background: transparent;
            border: 2px solid var(--secondary);
            width: 24px;
            height: 24px;
            border-radius: 50%;
            cursor: pointer;
            flex-shrink: 0;
            position: relative;
            transition: all 0.3s ease;
        }

        .complete-btn.completed {
            background: var(--secondary);
            border-color: var(--secondary);
        }

        .complete-btn.completed::after {
            content: '‚úì';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 0.8rem;
        }

        .task-meta {
            display: flex;
            gap: 1rem;
            align-items: center;
            margin-top: 0.5rem;
            font-size: 0.9rem;
        }

        .task-category {
            padding: 0.3rem 0.8rem;
            border-radius: 0.8rem;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            background: var(--category-work);
        }

        .category-personal { background: var(--category-personal) }
        .category-shopping { background: var(--category-shopping) }

        .stats-bar {
            position: fixed;
            bottom: 2rem;
            left: 50%;
            transform: translateX(-50%);
            background: var(--glass);
            padding: 1rem 2rem;
            border-radius: 1rem;
            backdrop-filter: blur(10px);
            display: flex;
            gap: 2rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="hero">
            <h1>NovaSphere</h1>
        </div>

        <div class="controls">
            <input type="text" class="search-bar" placeholder="üîç Search tasks..." id="searchInput">
            <button class="task-input" onclick="toggleTheme()" style="background: var(--primary); color: white;">Toggle Theme</button>
        </div>

        <div class="task-creator">
            <div class="input-grid">
                <input type="text" id="taskInput" class="task-input" placeholder="What's your next mission?">
                <input type="datetime-local" id="taskDue" class="task-input">
                <select id="taskCategory" class="task-input">
                    <option value="Work">üöÄ Work</option>
                    <option value="Personal">üéØ Personal</option>
                    <option value="Shopping">üõí Shopping</option>
                </select>
                <select id="taskPriority" class="task-input">
                    <option value="high">‚ùó High</option>
                    <option value="medium">üî∏ Medium</option>
                    <option value="low">üîπ Low</option>
                </select>
                <button class="task-input" onclick="addTask()" style="background: var(--primary); color: white;">ADD</button>
            </div>
        </div>

        <div class="task-list" id="taskList"></div>

        <div class="stats-bar" id="statsBar">
            <span>üìã Total: <span id="totalTasks">0</span></span>
            <span>‚úÖ Completed: <span id="completedTasks">0</span></span>
            <span>‚è≥ Pending: <span id="pendingTasks">0</span></span>
        </div>
    </div>

    <!-- Sound Elements -->
    <audio id="addSound" src="https://assets.mixkit.co/active_storage/sfx/2869/2869-preview.mp3"></audio>
    <audio id="completeSound" src="https://assets.mixkit.co/active_storage/sfx/2868/2868-preview.mp3"></audio>
    <audio id="deleteSound" src="https://assets.mixkit.co/active_storage/sfx/2870/2870-preview.mp3"></audio>
    <audio id="reminderSound" src="https://assets.mixkit.co/active_storage/sfx/2595/2595-preview.mp3"></audio>

    <script>
        let tasks = JSON.parse(localStorage.getItem('novaTasks')) || [];
        let timeouts = {};

        const sound = {
            add: document.getElementById('addSound'),
            complete: document.getElementById('completeSound'),
            delete: document.getElementById('deleteSound'),
            reminder: document.getElementById('reminderSound')
        };

        function playSound(type) {
            const audio = sound[type].cloneNode();
            audio.volume = type === 'reminder' ? 0.6 : 0.3;
            audio.play();
        }

        function updateStats() {
            document.getElementById('totalTasks').textContent = tasks.length;
            document.getElementById('completedTasks').textContent = tasks.filter(t => t.completed).length;
            document.getElementById('pendingTasks').textContent = tasks.filter(t => !t.completed).length;
        }

        function addTask() {
            const taskInput = document.getElementById('taskInput');
            if (!taskInput.value.trim()) return;

            playSound('add');

            const newTask = {
                id: Date.now(),
                text: taskInput.value.trim(),
                due: document.getElementById('taskDue').value,
                category: document.getElementById('taskCategory').value,
                priority: document.getElementById('taskPriority').value,
                completed: false,
                createdAt: new Date().toISOString()
            };

            tasks.push(newTask);
            saveTasks();
            renderTasks();
            setReminder(newTask);
            
            taskInput.value = '';
            taskInput.focus();
            updateStats();
        }

        function renderTasks(filter = 'all') {
            const searchQuery = document.getElementById('searchInput').value.toLowerCase();
            const filteredTasks = tasks.filter(task => 
                task.text.toLowerCase().includes(searchQuery) &&
                (filter === 'all' || task.category === filter)
            );

            const taskList = document.getElementById('taskList');
            taskList.innerHTML = '';

            filteredTasks.forEach(task => {
                const taskElement = document.createElement('div');
                taskElement.className = `task-card ${task.completed ? 'completed' : ''}`;
                taskElement.innerHTML = `
                    <div class="priority-indicator priority-${task.priority}"></div>
                    <button class="complete-btn ${task.completed ? 'completed' : ''}" 
                            onclick="toggleComplete(${task.id})"></button>
                    <div class="task-content">
                        <h3>${task.text}</h3>
                        <div class="task-meta">
                            <span class="task-category category-${task.category.toLowerCase()}">${task.category}</span>
                            ${task.due ? `
                            <span class="task-due">
                                ‚è≥ ${new Date(task.due).toLocaleString()}
                            </span>` : ''}
                            <span class="task-priority">${getPriorityIcon(task.priority)}</span>
                        </div>
                    </div>
                    <div class="task-actions">
                        <button class="action-btn" onclick="deleteTask(${task.id})">‚úï</button>
                    </div>
                `;
                
                taskList.appendChild(taskElement);
            });
        }

        function getPriorityIcon(priority) {
            return {
                high: '‚ùó‚ùó',
                medium: 'üî∏üî∏',
                low: 'üîπüîπ'
            }[priority];
        }

        function toggleComplete(taskId) {
            playSound('complete');
            tasks = tasks.map(task => 
                task.id === taskId ? { ...task, completed: !task.completed } : task
            );
            saveTasks();
            renderTasks();
            updateStats();
        }

        function deleteTask(taskId) {
            playSound('delete');
            const taskElement = document.querySelector(`[onclick="deleteTask(${taskId})"]`).closest('.task-card');
            
            if(taskElement) {
                taskElement.classList.add('removing');
                setTimeout(() => {
                    tasks = tasks.filter(task => task.id !== taskId);
                    if (timeouts[taskId]) {
                        clearTimeout(timeouts[taskId]);
                        delete timeouts[taskId];
                    }
                    saveTasks();
                    renderTasks();
                    updateStats();
                }, 400);
            }
        }

        function setReminder(task) {
            if (!task.due) return;
            
            const dueDate = new Date(task.due);
            const now = new Date();
            const timeout = dueDate - now;

            if (timeout > 0) {
                timeouts[task.id] = setTimeout(() => {
                    playSound('reminder');
                    showAlert(`‚è∞ Time's up! "${task.text}" is due now!`);
                }, timeout);
            }
        }

        function showAlert(message) {
            const alert = document.createElement('div');
            alert.style.position = 'fixed';
            alert.style.top = '20px';
            alert.style.right = '20px';
            alert.style.background = 'var(--glass)';
            alert.style.backdropFilter = 'blur(10px)';
            alert.style.padding = '1rem 2rem';
            alert.style.borderRadius = '1rem';
            alert.style.boxShadow = 'var(--neon-shadow)';
            alert.textContent = message;
            
            document.body.appendChild(alert);
            setTimeout(() => alert.remove(), 5000);
        }

        function toggleTheme() {
            const theme = document.body.getAttribute('data-theme') === 'dark' ? 'light' : 'dark';
            document.body.setAttribute('data-theme', theme);
            localStorage.setItem('theme', theme);
        }

        function saveTasks() {
            localStorage.setItem('novaTasks', JSON.stringify(tasks));
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            const savedTheme = localStorage.getItem('theme') || 'dark';
            document.body.setAttribute('data-theme', savedTheme);
            
            document.getElementById('searchInput').addEventListener('input', () => renderTasks());
            document.getElementById('taskInput').addEventListener('keypress', (e) => {
                if(e.key === 'Enter') addTask();
            });
            
            renderTasks();
            updateStats();
        });
    </script>
</body>
</html>